package com.jimnelson372.aoc2023.day21;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;

// This code was initially generated by ChatGPT, but I updated it for my needs.

public class NewtonInterpolation {

    public static long interpolate(List<Long> xValuesIn, List<Long> yValuesIn, long x) {
        if (xValuesIn.size() != yValuesIn.size()) {
            throw new IllegalArgumentException("Arrays xValues and yValues must have the same length");
        }

        var xValues = xValuesIn.stream().map(BigDecimal::valueOf).toList();
        var yValues = yValuesIn.stream().map(BigDecimal::valueOf).toList();

        int n = xValues.size();
        BigDecimal[] coefficients = new BigDecimal[n];

        // Calculate divided differences
        for (int i = 0; i < n; i++) {
            coefficients[i] = yValues.get(i);
        }

        for (int j = 1; j < n; j++) {
            for (int i = n - 1; i >= j; i--) {
                coefficients[i] = coefficients[i].subtract(coefficients[i - 1])
                        .divide(xValues.get(i).subtract(xValues.get(i - j)),
                                20, RoundingMode.HALF_EVEN);
            }
        }

        // Evaluate the polynomial at x
        BigDecimal result = coefficients[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            result = result.multiply(BigDecimal.valueOf(x).subtract(xValues.get(i))).add(coefficients[i]);
        }

        return result.longValue();
    }
}
